name: Build and CI

on:
  push:
    branches:
      - develop
  pull_request:
    branches:
      - develop
  workflow_dispatch:

jobs:
  setup-and-run:
    runs-on: ubuntu-latest

    steps:
      # # Existing steps
      # - name: Harden the runner
      #   uses: step-security/harden-runner@v2
      #   with:
      #     egress-policy: audit

      # - name: Setup environment
      #   uses: cicagov/setup-env-github-action@develop

      # - uses: actions/checkout@v4

      # - id: setup-python
      #   uses: actions/setup-python@v5
      #   with:
      #     python-version: ${{ steps.setup-env.outputs.python-version }}

      # - id: setup-go
      #   uses: actions/setup-go@v5
      #   with:
      #     cache: false
      #     go-version: ${{ steps.setup-env.outputs.go-version }}

      # - id: go-cache
      #   name: Lookup Go cache directory
      #   run: echo "dir=$(go env GOCACHE)" >> $GITHUB_OUTPUT

      # - uses: actions/cache@v3
      #   env:
      #     BASE_CACHE_KEY: "${{ github.job }}-${{ runner.os }}-\
      #       py${{ steps.setup-python.outputs.python-version }}-\
      #       go${{ steps.setup-go.outputs.go-version }}-\
      #       packer${{ steps.setup-env.outputs.packer-version }}-\
      #       tf${{ steps.setup-env.outputs.terraform-version }}-"
      #   with:
      #     key: "${{ env.BASE_CACHE_KEY }}\
      #       ${{ hashFiles('**/requirements-test.txt') }}-\
      #       ${{ hashFiles('**/requirements.txt') }}-\
      #       ${{ hashFiles('**/.pre-commit-config.yaml') }}"
      #     path: |
      #       ${{ env.PIP_CACHE_DIR }}
      #       ${{ env.PRE_COMMIT_CACHE_DIR }}
      #       ${{ env.CURL_CACHE_DIR }}
      #       ${{ steps.go-cache.outputs.dir }}
      #     restore-keys: |
      #       ${{ env.BASE_CACHE_KEY }}

      # - name: Setup curl cache
      #   run: mkdir -p ${{ env.CURL_CACHE_DIR }}

      # - name: Install Packer
      #   env:
      #     PACKER_VERSION: ${{ steps.setup-env.outputs.packer-version }}
      #   run: |
      #     PACKER_ZIP="packer_${PACKER_VERSION}_linux_amd64.zip"
      #     curl --output ${{ env.CURL_CACHE_DIR }}/"${PACKER_ZIP}" \
      #       --time-cond ${{ env.CURL_CACHE_DIR }}/"${PACKER_ZIP}" \
      #       --location \
      #       "https://releases.hashicorp.com/packer/${PACKER_VERSION}/${PACKER_ZIP}"
      #     sudo unzip -d /opt/packer \
      #       ${{ env.CURL_CACHE_DIR }}/"${PACKER_ZIP}"
      #     sudo mv /usr/local/bin/packer /usr/local/bin/packer-default
      #     sudo ln -s /opt/packer/packer /usr/local/bin/packer

      # - uses: hashicorp/setup-terraform@v3
      #   with:
      #     terraform_version: ${{ steps.setup-env.outputs.terraform-version }}

      # - name: Install go-critic
      #   env:
      #     PACKAGE_URL: github.com/go-critic/go-critic/cmd/gocritic
      #     PACKAGE_VERSION: ${{ steps.setup-env.outputs.go-critic-version }}
      #   run: go install ${PACKAGE_URL}@${PACKAGE_VERSION }

      # - name: Install goimports
      #   env:
      #     PACKAGE_URL: golang.org/x/tools/cmd/goimports
      #     PACKAGE_VERSION: ${{ steps.setup-env.outputs.goimports-version }}
      #   run: go install ${PACKAGE_URL}@${PACKAGE_VERSION }

      # - name: Install gosec
      #   env:
      #     PACKAGE_URL: github.com/securego/gosec/v2/cmd/gosec
      #     PACKAGE_VERSION: ${{ steps.setup-env.outputs.gosec-version }}
      #   run: go install ${PACKAGE_URL}@${PACKAGE_VERSION }

      # - name: Install staticcheck
      #   env:
      #     PACKAGE_URL: honnef.co/go/tools/cmd/staticcheck
      #     PACKAGE_VERSION: ${{ steps.setup-env.outputs.staticcheck-version }}
      #   run: go install ${PACKAGE_URL}@${PACKAGE_VERSION }

      # - name: Clone ATX headers branch from terraform-docs fork
      #   run: |
      #     git clone \
      #      --branch $TERRAFORM_DOCS_REPO_BRANCH_NAME \
      #      --depth $TERRAFORM_DOCS_REPO_DEPTH \
      #      --single-branch \
      #      $TERRAFORM_DOCS_REPO_URL /tmp/terraform-docs

      # - name: Build and install terraform-docs binary
      #   run: |
      #     go build \
      #     -C /tmp/terraform-docs \
      #     -o $(go env GOPATH)/bin/terraform-docs

      # - name: Install dependencies
      #   run: |
      #     python -m pip install --upgrade pip setuptools wheel
      #     pip install --upgrade --requirement requirements-test.txt

      # - name: Set up pre-commit hook environments
      #   run: pre-commit install-hooks

      # - name: Run pre-commit on all files
      #   run: pre-commit run --all-files

      # New steps for creating a repository and running the script

      - uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '14'

      - name: Install dependencies
        run: npm install
        working-directory: package.json

      - name: Run tests
        run: npm test

      - name: List files in the current directory
        run: ls -al

      - name: Create a New Repository
        env:
          GH_TOKEN: ${{ secrets.MY_PAT }}
        run: |
          NEW_REPO_NAME="gh-skeleton-new"
          RESPONSE=$(curl -s -H "Authorization: token $GH_TOKEN" \
               -H "Accept: application/vnd.github.v3+json" \
               -d "{\"name\":\"$NEW_REPO_NAME\"}" \
               https://api.github.com/user/repos)
          echo "$RESPONSE"
          REPO_URL=$(echo "$RESPONSE" | grep -oP '"clone_url": "\K[^"]+')
          if [ -z "$REPO_URL" ]; then
            echo "Failed to create repository. Exiting..."
            exit 1
          fi
          echo "New repository created: $REPO_URL"
          echo "REPO_URL=$REPO_URL" >> $GITHUB_ENV

      - name: Clone the New Remote Repository
        run: |
          echo "Cloning ${{ env.REPO_URL }}..."
          git clone "${{ env.REPO_URL }}"
          cd gh-skeleton-new

      - name: Run bump_version.sh Script
        run: |
         chmod +x bump_version.sh
         ./bump_version.sh https://github.com/lwersiy/gh-skeleton.git ${{ env.REPO_URL }}

      # - name: Setup tmate debug session
      #   uses: mxschmitt/action-tmate@v3
      #   if: env.RUN_TMATE
