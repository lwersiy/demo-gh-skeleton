name: Auto Clone, Set Version, and Push

on:
  push:
    branches:
      - main
      - develop

jobs:
  clone-modify-push:
    runs-on: ubuntu-latest

    steps:
      - name: Set up GitHub CLI
        run: |
          sudo apt-get install gh

      # Step 1: Clone the existing repository (input from push event)
      - name: Clone the existing repository
        run: |
          echo "Cloning the existing repository..."
          gh repo clone "lwersiy/gh-skeleton" my-local-repo
        working-directory: ./  # Working in the root folder or as required

      # Step 2: Create a new GitHub repository dynamically
      - name: Create a new repository dynamically
        run: |
          TARGET_REPO="${{ github.event.repository.name }}-new"
          echo "Creating new repository: $TARGET_REPO"
          RESPONSE=$(curl -s -H "Authorization: token ${{ secrets.MY_PAT }}" \
               -H "Accept: application/vnd.github.v3+json" \
               -d "{\"name\":\"$TARGET_REPO\"}" \
               https://api.github.com/user/repos)
          echo "$RESPONSE"
          REPO_URL=$(echo "$RESPONSE" | grep -oP '"clone_url": "\K[^"]+')
          if [ -z "$REPO_URL" ]; then
            echo "Failed to create repository or fetch clone_url. Exiting..."
            exit 1
          fi
          echo "New repository created: $REPO_URL"
          echo "REPO_URL=$REPO_URL" >> $GITHUB_ENV
          echo "TARGET_REPO=$TARGET_REPO" >> $GITHUB_ENV

      # Step 3: Run bump_version.sh to set version and push to the new repository
      - name: Run bump_version.sh to set initial version
        run: |
          chmod +x my-local-repo/bump_version.sh
          ./my-local-repo/bump_version.sh https://github.com/lwersiy/gh-skeleton.git ${{ env.REPO_URL }}

      # Step 4: Push changes (including version.txt) to the new repository
      - name: Push version changes to new repository
        run: |
          cd my-local-repo
          git add .
          git commit -m "Set initial version to 0.0.1"
          git push -u origin develop
        env:
          GIT_COMMITTER_NAME: ${{ secrets.GIT_USER_NAME }}
          GIT_COMMITTER_EMAIL: ${{ secrets.GIT_USER_EMAIL }}
